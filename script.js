// --- 1. REFER√äNCIAS AOS ELEMENTOS DO HTML ---
// Primeiro, pegamos todos os elementos HTML com os quais vamos interagir
// e os guardamos em vari√°veis para facilitar o acesso.

const chatArea = document.getElementById('chat-area');
const userForm = document.getElementById('user-form');
const userInput = document.getElementById('user-input');
const botResponseArea = document.getElementById('bot-response-area');
const feedbackButtons = document.getElementById('feedback-buttons');
const btnAcertou = document.getElementById('btn-acertou');
const btnErrou = document.getElementById('btn-errou');

// NOVAS REFER√äNCIAS PARA O MODAL DA DICA
const dicaEducativaContent = document.getElementById('dicaEducativaContent');
const dicaEducativaModalElement = document.getElementById('dicaEducativaModal');
// Inicializa o objeto Modal do Bootstrap no JS
const dicaEducativaModal = new bootstrap.Modal(dicaEducativaModalElement);
let dicaEducativaMostrada = false;



// --- 2. L√ìGICA DE ADIVINHA√á√ÉO DO BOT ---

// Listas de palavras-chave que o bot usar√° para "adivinhar".
const palavrasFalsas = ["sempre", "nunca", "todos", "ningu√©m", "inacredit√°vel", "chocante", "absurdo"];
const palavrasVerdadeiras = ["nasa", "oms", "instituto", "estudo", "pesquisa", "cientistas", "%"];

// Fun√ß√£o que recebe a frase do usu√°rio e tenta adivinhar se √© fato ou mentira.
function adivinharFrase(frase) {
    const fraseLowerCase = frase.toLowerCase(); // Converte a frase para min√∫sculas para facilitar a busca.

    // Verifica se alguma palavra da lista "palavrasFalsas" est√° na frase.
    for (const palavra of palavrasFalsas) {
        if (fraseLowerCase.includes(palavra)) {
            return "MENTIRA"; // Se encontrar, o bot chuta que √© mentira.
        }
    }

    // Verifica se alguma palavra da lista "palavrasVerdadeiras" est√° na frase.
    for (const palavra of palavrasVerdadeiras) {
        if (fraseLowerCase.includes(palavra)) {
            return "FATO"; // Se encontrar, o bot chuta que √© fato.
        }
    }

    // Se n√£o encontrou nenhuma palavra-chave, o bot chuta aleatoriamente.
    // Math.random() retorna um n√∫mero entre 0 e 1. Se for maior que 0.5, √© Fato. Sen√£o, Mentira.
    return Math.random() > 0.5 ? "FATO" : "MENTIRA";
}

// --- 3. FUN√á√ïES DE INTERA√á√ÉO COM A TELA ---

// Defina a URL da imagem do bot aqui
const BOT_PROFILE_PIC_URL = 'https://static.jojowiki.com/images/thumb/2/25/latest/20220711013122/PPP_HolHorse_Win.png/640px-PPP_HolHorse_Win.png'; 

// **ESTA √â A FUN√á√ÉO CORRETA - MANTENHA APENAS ELA!**
function adicionarMensagem(texto, remetente) {
    
    // 1. Cria o cont√™iner da linha de chat
    const chatLine = document.createElement('div');
    chatLine.classList.add('chat-line');
    
    // 2. Cria a bolha de mensagem
    const bubble = document.createElement('div');
    bubble.classList.add('chat-bubble');
    bubble.textContent = texto;

    if (remetente === 'bot') {
        // Se for o bot, criamos a imagem
        const profilePic = document.createElement('img');
        profilePic.src = BOT_PROFILE_PIC_URL;
        profilePic.alt = 'Foto de perfil do Bot';
        profilePic.classList.add('bot-profile-pic');
        
        // Adiciona a imagem e a bolha na ordem correta: IMAGEM -> BOLHA
        chatLine.appendChild(profilePic);
        chatLine.appendChild(bubble);
        
        // Adiciona a classe espec√≠fica do bot
        bubble.classList.add('bot-bubble'); 
        
    } else {
        // Se for o usu√°rio, a estrutura √© mais simples (apenas a bolha)
        chatLine.appendChild(bubble);
        chatLine.classList.add('user-line'); // Para alinhar √† direita no CSS
        
        // Adiciona a classe espec√≠fica do usu√°rio
        bubble.classList.add('user-bubble'); 
    }

    // 3. Adiciona a linha completa (imagem + bolha) na √°rea de chat
    chatArea.appendChild(chatLine); 

    // Faz a √°rea de chat rolar para baixo para mostrar a √∫ltima mensagem
    chatArea.scrollTop = chatArea.scrollHeight;
}


// 1. Array de mensagens quando o bot ACERTA o palpite
const mensagensAcertou = [
    "Eu sabia! A intui√ß√£o n√£o falha üòé",
    "√â o Hol Horse, n√£o tem jeito.",
    "Estou insuper√°vel hoje, hein?",
    "Ez pro maior pistoleiro do Egito.",
    "Ah, essa estava na cara."
];

// 2. Array de mensagens quando o bot ERRA o palpite
const mensagensErrou = [
    "Ah, eu deixei voc√™ ganhar dessa vez, vai.",
    "Ah, mas a√≠ tamb√©m n√©...",
    "Isso n√£o conta! Da pr√≥xima vez eu vou ganhar, pode escrever.",
    "Hmm, meu palpite falhou. Mas eu tenho culpa que voc√™ escreveu com tanta convic√ß√£o?",
    "N√£o importa. Tenho o 'The Emperor', o imperador dos palpites... mas ele n√£o quis se intrometer."
];


// 3. MENSAGEM √öNICA (Em vez do Array de Dicas)
const MENSAGEM_FAKE_NEWS_LONGA = "Sejamos conscientes, presta aten√ß√£o: a pergunta <b><i>‚Äú√â verdade ou voc√™ t√° viajando?‚Äù</i></b> n√£o serve s√≥ para o t√≠tulo, tamb√©m se aplica √† vida real. O primeiro passo contra as <b>Fake News</b> √© a d√∫vida. Se a not√≠cia parece absurda demais, e ainda estiver em <b>grupo do WhatsApp ou Facebook</b>, provavelmente √© ideia torta. N√£o seja bobo: use seu senso cr√≠tico e procure por <b>fontes confi√°veis</b> para ter certeza. N√£o compartilhe <b>nada</b> antes disso. ";

// Fun√ß√£o auxiliar para escolher uma mensagem aleat√≥ria de um array
function escolherMensagemAleatoria(mensagens) {
    // Math.random() retorna um n√∫mero entre 0 e 1. Multiplicamos pelo tamanho do array.
    // Math.floor() arredonda para o menor inteiro, garantindo um √≠ndice v√°lido (0 at√© length-1).
    const indiceAleatorio = Math.floor(Math.random() * mensagens.length);
    return mensagens[indiceAleatorio];
}

// Fun√ß√£o para reiniciar o jogo para a pr√≥xima rodada.
function reiniciarRodada() {
    botResponseArea.textContent = ''; // Limpa a resposta do bot
    feedbackButtons.classList.add('d-none'); // Esconde os bot√µes de feedback
    userInput.value = ''; // Limpa a caixa de texto
    userInput.disabled = false; // Reabilita a caixa de texto
    userInput.focus(); // Coloca o cursor na caixa de texto

    // Mensagem do bot para a pr√≥xima rodada (AGORA √â ALEAT√ìRIA)
    setTimeout(() => {
        // Escolhe uma mensagem aleat√≥ria do novo array
        const mensagemProximaRodada = escolherMensagemAleatoria(mensagensReiniciar); 
        adicionarMensagem(mensagemProximaRodada, 'bot');
    }, 1500); // Espera 1.5 segundos para a mensagem aparecer
}

// 4. Array de mensagens para reiniciar a rodada
const mensagensReiniciar = [
    "Manda outra a√≠, quero ver se voc√™ me engana agora!",
    "Pode mandar a pr√≥xima! O pai se garante.",
    "Me desafia de novo que eu quero ver!",
    "Pode desistir ainda n√£o, me manda mais uma!",
    "Ok, ok. S√≥ mais uma, que eu j√° tenho meus palpites."
];

// --- 4. EVENTOS DO JOGO (OUVINTES DE A√á√ïES) ---

// Evento que acontece quando a p√°gina carrega pela primeira vez.
window.addEventListener('load', () => {
    adicionarMensagem("Opa! Eu sou o Bot do Hol Horse. Me desafie! Escreva uma frase, seja ela um fato ou algo que voc√™ acabou de inventar, e eu vou tentar adivinhar qual dos dois √©.", 'bot');
    setTimeout(() => {
        adicionarMensagem("Lembrando que eu n√£o consigo responder como uma IA, sou programado apenas para adivinha√ß√£o. Pode come√ßar!", 'bot');
    }, 3000);
});

// Evento que acontece quando o usu√°rio envia o formul√°rio (clica em "Enviar").
userForm.addEventListener('submit', (event) => {
    event.preventDefault(); // Impede que a p√°gina recarregue ao enviar o formul√°rio.

    const fraseUsuario = userInput.value; // Pega o texto que o usu√°rio digitou.
    if (!fraseUsuario) return; // Se n√£o digitou nada, n√£o faz nada.

    adicionarMensagem(fraseUsuario, 'user'); // Mostra a mensagem do usu√°rio na tela.
    userInput.disabled = true; // Desabilita o campo de texto enquanto o bot "pensa".

    // Simula o bot pensando por um tempo
    setTimeout(() => {
        const palpite = adivinharFrase(fraseUsuario); // Pega o palpite do bot.
        botResponseArea.textContent = `Hmm, isso me parece... um(a) ${palpite}!`; // Mostra o palpite.
        feedbackButtons.classList.remove('d-none'); // Mostra os bot√µes "Acertou!" e "Errou!".
    }, 1500); // Espera 1.5 segundos
});

// Evento para o bot√£o "Acertou!"
btnAcertou.addEventListener('click', () => {
    // Usa a nova fun√ß√£o para pegar uma mensagem aleat√≥ria
    const mensagem = escolherMensagemAleatoria(mensagensAcertou);
    adicionarMensagem(mensagem, 'bot');
    reiniciarRodada(); 
});

// Evento para o bot√£o "Errou!"
btnErrou.addEventListener('click', () => {
    const mensagem = escolherMensagemAleatoria(mensagensErrou);
    adicionarMensagem(mensagem, 'bot');

    // L√ìGICA DO MODAL DA DICA
    if (dicaEducativaMostrada === false) {
        
        // 1. Injeta o conte√∫do no modal
        dicaEducativaContent.innerHTML = `<p>${MENSAGEM_FAKE_NEWS_LONGA}</p>`;
        
        // 2. Espera um pouco para mostrar o modal
        setTimeout(() => {
            dicaEducativaModal.show(); // MOSTRA O MODAL!
            dicaEducativaMostrada = true; // Marca a flag como verdadeira
        }, 1500); 

        // IMPORTANTE: N√ÉO REINICIA AQUI. O JOGO S√ì REINICIA DEPOIS QUE O MODAL FOR FECHADO.
    } else {
        // Se a dica J√Å foi mostrada, reinicia a rodada imediatamente
        reiniciarRodada();
    }
});

// NOVO EVENTO: Garante que o jogo reinicie ap√≥s o modal de Dica Educativa ser fechado.
dicaEducativaModalElement.addEventListener('hidden.bs.modal', function (event) {
    // Esta fun√ß√£o ser√° chamada sempre que o modal for fechado (pelo 'x' ou pelo bot√£o 'Entendi').
    reiniciarRodada();
});

// FIM do script.js